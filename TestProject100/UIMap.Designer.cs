// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TestProject100
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// GivenIamontheLoginpage - Test Case 70
        /// </summary>
        public void GivenIamontheLoginpage()
        {
            #region Variable Declarations
            WinEdit uIEmailEdit = this.UIMozillaFirefoxWindow.UIItemDocument.UIEmailEdit;
            #endregion

            // Click 'Email:' text box
            Mouse.Click(uIEmailEdit, new Point(28, 13));
        }
        
        /// <summary>
        /// WhenIleaveEmailfieldempty - Test Case 70
        /// </summary>
        public void WhenIleaveEmailfieldempty()
        {
            #region Variable Declarations
            WinEdit uIEmailEdit = this.UIMozillaFirefoxWindow.UIItemDocument.UIEmailEdit;
            #endregion

            // Click 'Email:' text box
            Mouse.Click(uIEmailEdit, new Point(14, 11));
        }
        
        /// <summary>
        /// AndItypePasswordinthePasswordfield - Test Case 70 - Use 'AndItypePasswordinthePasswordfieldParams' to pass parameters into this method.
        /// </summary>
        public void AndItypePasswordinthePasswordfield()
        {
            #region Variable Declarations
            WinEdit uIPasswordEdit = this.UIMozillaFirefoxWindow.UIItemDocument.UIPasswordEdit;
            #endregion

            // Click 'Password:' text box
            Mouse.Click(uIPasswordEdit, new Point(60, 19));

            // Type '********' in 'Password:' text box
            Keyboard.SendKeys(uIPasswordEdit, this.AndItypePasswordinthePasswordfieldParams.UIPasswordEditSendKeys, ModifierKeys.Control, true);
        }
        
        /// <summary>
        /// AndIclickloginbutton - Test Case 70
        /// </summary>
        public void AndIclickloginbutton()
        {
            #region Variable Declarations
            WinEdit uILoginEdit = this.UIMozillaFirefoxWindow.UILoginButton.UILoginEdit;
            #endregion

            // Click 'login' text box
            Mouse.Click(uILoginEdit, new Point(10, 8));
        }
        
        /// <summary>
        /// Item - Test Case 70
        /// </summary>
        public void Item()
        {
            #region Variable Declarations
            WinButton uILoginButton = this.UIMozillaFirefoxWindow.UIItemDocument.UILoginButton;
            #endregion

            // Click '✔ login' button
            Mouse.Click(uILoginButton, new Point(29, 8));
        }
        
        #region Properties
        public virtual AndItypePasswordinthePasswordfieldParams AndItypePasswordinthePasswordfieldParams
        {
            get
            {
                if ((this.mAndItypePasswordinthePasswordfieldParams == null))
                {
                    this.mAndItypePasswordinthePasswordfieldParams = new AndItypePasswordinthePasswordfieldParams();
                }
                return this.mAndItypePasswordinthePasswordfieldParams;
            }
        }
        
        public UIMozillaFirefoxWindow UIMozillaFirefoxWindow
        {
            get
            {
                if ((this.mUIMozillaFirefoxWindow == null))
                {
                    this.mUIMozillaFirefoxWindow = new UIMozillaFirefoxWindow();
                }
                return this.mUIMozillaFirefoxWindow;
            }
        }
        #endregion
        
        #region Fields
        private AndItypePasswordinthePasswordfieldParams mAndItypePasswordinthePasswordfieldParams;
        
        private UIMozillaFirefoxWindow mUIMozillaFirefoxWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AndItypePasswordinthePasswordfield'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AndItypePasswordinthePasswordfieldParams
    {
        
        #region Fields
        /// <summary>
        /// Type '********' in 'Password:' text box
        /// </summary>
        public string UIPasswordEditSendKeys = "qCCZkjIevam+j1jjLCjLdA==";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMozillaFirefoxWindow : WinWindow
    {
        
        public UIMozillaFirefoxWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UIItemDocument UIItemDocument
        {
            get
            {
                if ((this.mUIItemDocument == null))
                {
                    this.mUIItemDocument = new UIItemDocument(this);
                }
                return this.mUIItemDocument;
            }
        }
        
        public UILoginButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new UILoginButton(this);
                }
                return this.mUILoginButton;
            }
        }
        #endregion
        
        #region Fields
        private UIItemDocument mUIItemDocument;
        
        private UILoginButton mUILoginButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemDocument : WinControl
    {
        
        public UIItemDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Email:";
                    this.mUIEmailEdit.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public WinEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Password:";
                    this.mUIPasswordEdit.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public WinButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new WinButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[WinButton.PropertyNames.Name] = "✔ login";
                    this.mUILoginButton.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIEmailEdit;
        
        private WinEdit mUIPasswordEdit;
        
        private WinButton mUILoginButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UILoginButton : WinButton
    {
        
        public UILoginButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinButton.PropertyNames.Name] = "✔ login";
            this.WindowTitles.Add("Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinEdit UILoginEdit
        {
            get
            {
                if ((this.mUILoginEdit == null))
                {
                    this.mUILoginEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUILoginEdit.SearchProperties[WinEdit.PropertyNames.Name] = "login";
                    this.mUILoginEdit.WindowTitles.Add("Mozilla Firefox");
                    #endregion
                }
                return this.mUILoginEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUILoginEdit;
        #endregion
    }
}
